--- proto.h	2010-09-23 23:02:37.000000000 +0800
+++ /home/yijun/oranges/chapter10/a/include/sys/proto.h	2010-09-11 08:27:03.000000000 +0800
@@ -1,47 +1,46 @@
 
 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-                            proto.h	2010,7,1
-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+                            proto.h
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+                                                    Forrest Yu, 2005
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 
-					Mephisto
-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
-
-
-/* klib.S*/
+/* kliba.asm */
 PUBLIC void	out_byte(u16 port, u8 value);
 PUBLIC u8	in_byte(u16 port);
 PUBLIC void	disp_str(char * info);
 PUBLIC void	disp_color_str(char * info, int color);
-PUBLIC void     disable_irq(int irq);
-PUBLIC void     enable_irq(int irq);
-PUBLIC void     disable_int();
-PUBLIC void     enable_int();
+PUBLIC void	disable_irq(int irq);
+PUBLIC void	enable_irq(int irq);
+PUBLIC void	disable_int();
+PUBLIC void	enable_int();
 PUBLIC void	port_read(u16 port, void* buf, int n);
 PUBLIC void	port_write(u16 port, void* buf, int n);
 PUBLIC void	glitter(int row, int col);
 
-/* string.S*/
-PUBLIC char*    strcpy(char* dst, const char* src);
+/* string.asm */
+PUBLIC char*	strcpy(char* dst, const char* src);
 
 /* protect.c */
-PUBLIC void     init_prot();
+PUBLIC void	init_prot();
 PUBLIC u32	seg2linear(u16 seg);
 PUBLIC void	init_desc(struct descriptor * p_desc,
-			u32 base, u32 limit, u16 attribute);
+			  u32 base, u32 limit, u16 attribute);
+
 /* klib.c */
 PUBLIC void	get_boot_params(struct boot_params * pbp);
 PUBLIC int	get_kernel_map(unsigned int * b, unsigned int * l);
-PUBLIC void     delay(int time);
+PUBLIC void	delay(int time);
 PUBLIC void	disp_int(int input);
-PUBLIC char *   itoa(char * str, int num);
+PUBLIC char *	itoa(char * str, int num);
 
-/* kernel.S*/
+/* kernel.asm */
 PUBLIC void restart();
 
 /* main.c */
 PUBLIC void Init();
 PUBLIC int  get_ticks();
-PUBLIC void TestA(); 
+PUBLIC void TestA();
 PUBLIC void TestB();
 PUBLIC void TestC();
 PUBLIC void panic(const char *fmt, ...);
@@ -57,8 +56,8 @@
 PUBLIC void milli_delay(int milli_sec);
 
 /* kernel/hd.c */
-PUBLIC void	task_hd();
-PUBLIC void	hd_handler(int irq);
+PUBLIC void task_hd();
+PUBLIC void hd_handler(int irq);
 
 /* keyboard.c */
 PUBLIC void init_keyboard();
@@ -73,9 +72,9 @@
 PUBLIC void task_sys();
 
 /* fs/main.c */
-PUBLIC void task_fs();
-PUBLIC int  rw_sector(int io_type, int dev, u64 pos, int bytes, int proc_nr,\
-		      void * buf);
+PUBLIC void			task_fs();
+PUBLIC int			rw_sector(int io_type, int dev, u64 pos,
+					  int bytes, int proc_nr, void * buf);
 PUBLIC struct inode *		get_inode(int dev, int num);
 PUBLIC void			put_inode(struct inode * pinode);
 PUBLIC void			sync_inode(struct inode * p);
@@ -112,6 +111,9 @@
 PUBLIC void		do_exit(int status);
 PUBLIC void		do_wait();
 
+/* mm/exec.c */
+/* PUBLIC int		do_exec(); */
+
 /* console.c */
 PUBLIC void out_char(CONSOLE* p_con, char ch);
 PUBLIC void scroll_screen(CONSOLE* p_con, int direction);
@@ -120,13 +122,13 @@
 PUBLIC int  is_current_console(CONSOLE* p_con);
 
 /* proc.c */
-PUBLIC  void    schedule();
-PUBLIC  void*   va2la(int pid, void* va);
-PUBLIC  int     ldt_seg_linear(struct proc* p, int idx);
-PUBLIC  void    reset_msg(MESSAGE* p);
-PUBLIC  void    dump_msg(const char * title, MESSAGE* m);
-PUBLIC  void    dump_proc(struct proc * p);
-PUBLIC  int     send_recv(int function, int src_dest, MESSAGE* msg);
+PUBLIC	void	schedule();
+PUBLIC	void*	va2la(int pid, void* va);
+PUBLIC	int	ldt_seg_linear(struct proc* p, int idx);
+PUBLIC	void	reset_msg(MESSAGE* p);
+PUBLIC	void	dump_msg(const char * title, MESSAGE* m);
+PUBLIC	void	dump_proc(struct proc * p);
+PUBLIC	int	send_recv(int function, int src_dest, MESSAGE* msg);
 PUBLIC void	inform_int(int task_nr);
 
 /* lib/misc.c */
@@ -134,15 +136,14 @@
 
 /* 以下是系统调用相关 */
 
-/*sys_call - system*/
+/* 系统调用 - 系统级 */
 /* proc.c */
-PUBLIC  int     sys_sendrec(int function, int src_dest, MESSAGE* m, struct proc* p);
-PUBLIC  int     sys_printx(int _unused1, int _unused2, char* s, struct proc * p_proc);
+PUBLIC	int	sys_sendrec(int function, int src_dest, MESSAGE* m, struct proc* p);
+PUBLIC	int	sys_printx(int _unused1, int _unused2, char* s, struct proc * p_proc);
 
-/* syscall.S*/
+/* syscall.asm */
 PUBLIC  void    sys_call();             /* int_handler */
 
-/*sys_call - user*/
-PUBLIC  int     sendrec(int function, int src_dest, MESSAGE* p_msg);
-PUBLIC  int     printx(char* str);
-
+/* 系统调用 - 用户级 */
+PUBLIC	int	sendrec(int function, int src_dest, MESSAGE* p_msg);
+PUBLIC	int	printx(char* str);
